#include <iostream>
#include <cstdio>
using namespace std;

int main()
{
	// 1. 대입 연산자('=')을 사용하여 상수를 대입하는 방식으로 변수를 초기화한다.
	// 이는 C 언어에서 사용하는 대표적인 초기화 방법이다.
	int a = 10;
	cout << "a : " << a << endl;

	// 2. 객체 지향 언어에서 객체를 생성시킬 때 사용하는 생성자처럼 변수와
	// '()' 함수 호출 연산자 그리고 리터럴을 인수로 사용하여 변수를 초기화한다.
	int b(20);
	std::cout << "b : " << b << std::endl;

	// 3. 중괄호를 사용하여 변수를 초기화한다.
	int c{ 30 }; //-std=c++11 이후부터 사용이 가능하다.
	std::cout << "c : " << c << std::endl;

	// 4. int 타입의 무명 변수를 생성하고 무명 변수의 값을 변수에 대입시켜 초기화한다.
	// int(40)과 같이 이름이 없는 무명 변수는 문장이 완료되면 자동 삭제된다.
	int d = int(40); //int(40)은 변수의 이름이 없는 무명 변수이다.
	std::cout << "d : " << d << std::endl;

	// 5. 변수 생성 시 비어 있는 인수로 변수를 초기화 한다면 플랫폼에 따라
	// 컴파일이 될 수도, 안될 수도 있다. 
	// 해당 초기화는 변수에 어떤 값이 들어있는지 알 수 없다.
	int e(); // 'int e();' 의 초기화 작업은 원칙적으로 허용되지 않는다.

	// 6. 아래처럼 무명 변수를 선언하고 대입한다면, 변수는 0으로 초기화된다.
	// 이는 객체 지향 언어에서 유래된 방식이다.
	int f = int(); // 여기서 int() 함수를 디폴트 생성자라 부른다.

	// 7. 배열의 초기화처럼 중괄호와 함께 리터럴을 만들어 변수에 대입하여 생성한다.
	int g = { 50 };

	// 8. new 연산자를 사용하여 메모리 저장소를 생성하여 변수에 할당한다.
	int* h = new int; // new 라는 지시어를 사용한다면, 저장소는 heap 메모리에 저장된다.

	// 초기화없이 생성되면, 생성된 변수는 알 수 없는 값이 들어있게 된다.
	
	// 9. new 지정자와 () 함수 호출 연산자를 함께 사용한다면 포인터가 가리키는 저장소는
	// 자동으로 초기화된다. 이 방법은 앞에서 언급한 것처럼 객체 지향 언어에서 유래된 방식이다.
	int* i = new int();
	
	int* j = new int(60); //j 포인터가 가리키는 저장소의 값은 60으로 초기화된다.

	// 10. bool 타입의 변수는 true와 false를 사용하여 초기화된다.
	// 타입이 다르다 하더라도 초기화하는 방법은 앞에서 설명한 변수들과 동일하다.
	bool ok = true; //bool ok(false);
}